'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

' 
' This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
' 

Imports Microsoft.VisualBasic
	Imports System.Runtime.Serialization
Namespace RichEditSendMailSL.MailServiceReference


	<System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name:="AttachementInfo", Namespace:="http://schemas.datacontract.org/2004/07/")> _
	Partial Public Class AttachementInfo
		Inherits Object
		Implements System.ComponentModel.INotifyPropertyChanged

		Private ContentIdField As String

		Private DataField() As Byte

		Private MimeTypeField As String

		<System.Runtime.Serialization.DataMemberAttribute()> _
		Public Property ContentId() As String
			Get
				Return Me.ContentIdField
			End Get
			Set(ByVal value As String)
				If (Object.ReferenceEquals(Me.ContentIdField, value) <> True) Then
					Me.ContentIdField = value
					Me.RaisePropertyChanged("ContentId")
				End If
			End Set
		End Property

		<System.Runtime.Serialization.DataMemberAttribute()> _
		Public Property Data() As Byte()
			Get
				Return Me.DataField
			End Get
			Set(ByVal value As Byte())
				If (Object.ReferenceEquals(Me.DataField, value) <> True) Then
					Me.DataField = value
					Me.RaisePropertyChanged("Data")
				End If
			End Set
		End Property

		<System.Runtime.Serialization.DataMemberAttribute()> _
		Public Property MimeType() As String
			Get
				Return Me.MimeTypeField
			End Get
			Set(ByVal value As String)
				If (Object.ReferenceEquals(Me.MimeTypeField, value) <> True) Then
					Me.MimeTypeField = value
					Me.RaisePropertyChanged("MimeType")
				End If
			End Set
		End Property

		Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

		Protected Sub RaisePropertyChanged(ByVal propertyName As String)
			Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
			If (PropertyChangedEvent IsNot Nothing) Then
				PropertyChangedEvent(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"), System.ServiceModel.ServiceContractAttribute(ConfigurationName:="MailServiceReference.IMailService")> _
	Public Interface IMailService

		<System.ServiceModel.OperationContractAttribute(AsyncPattern:=True, Action:="http://tempuri.org/IMailService/SendMail", ReplyAction:="http://tempuri.org/IMailService/SendMailResponse")> _
		Function BeginSendMail(ByVal mailHost As String, ByVal [from] As String, ByVal [to] As String, ByVal subject As String, ByVal body As String, ByVal attachments As System.Collections.Generic.List(Of RichEditSendMailSL.MailServiceReference.AttachementInfo), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult

		Sub EndSendMail(ByVal result As System.IAsyncResult)
	End Interface

	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")> _
	Public Interface IMailServiceChannel
	Inherits RichEditSendMailSL.MailServiceReference.IMailService, System.ServiceModel.IClientChannel
	End Interface

	<System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")> _
	Partial Public Class MailServiceClient
		Inherits System.ServiceModel.ClientBase(Of RichEditSendMailSL.MailServiceReference.IMailService)
		Implements RichEditSendMailSL.MailServiceReference.IMailService

		Private onBeginSendMailDelegate As BeginOperationDelegate

		Private onEndSendMailDelegate As EndOperationDelegate

		Private onSendMailCompletedDelegate As System.Threading.SendOrPostCallback

		Private onBeginOpenDelegate As BeginOperationDelegate

		Private onEndOpenDelegate As EndOperationDelegate

		Private onOpenCompletedDelegate As System.Threading.SendOrPostCallback

		Private onBeginCloseDelegate As BeginOperationDelegate

		Private onEndCloseDelegate As EndOperationDelegate

		Private onCloseCompletedDelegate As System.Threading.SendOrPostCallback

		Public Sub New()
		End Sub

		Public Sub New(ByVal endpointConfigurationName As String)
			MyBase.New(endpointConfigurationName)
		End Sub

		Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
			MyBase.New(endpointConfigurationName, remoteAddress)
		End Sub

		Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
			MyBase.New(endpointConfigurationName, remoteAddress)
		End Sub

		Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
			MyBase.New(binding, remoteAddress)
		End Sub

		Public Property CookieContainer() As System.Net.CookieContainer
			Get
				Dim httpCookieContainerManager As System.ServiceModel.Channels.IHttpCookieContainerManager = Me.InnerChannel.GetProperty(Of System.ServiceModel.Channels.IHttpCookieContainerManager)()
				If (httpCookieContainerManager IsNot Nothing) Then
					Return httpCookieContainerManager.CookieContainer
				Else
					Return Nothing
				End If
			End Get
			Set(ByVal value As System.Net.CookieContainer)
				Dim httpCookieContainerManager As System.ServiceModel.Channels.IHttpCookieContainerManager = Me.InnerChannel.GetProperty(Of System.ServiceModel.Channels.IHttpCookieContainerManager)()
				If (httpCookieContainerManager IsNot Nothing) Then
					httpCookieContainerManager.CookieContainer = value
				Else
					Throw New System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" & "ookieContainerBindingElement.")
				End If
			End Set
		End Property

		Public Event SendMailCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

		Public Event OpenCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

		Public Event CloseCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)

		<System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
		Private Function BeginSendMail(ByVal mailHost As String, ByVal [from] As String, ByVal [to] As String, ByVal subject As String, ByVal body As String, ByVal attachments As System.Collections.Generic.List(Of RichEditSendMailSL.MailServiceReference.AttachementInfo), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RichEditSendMailSL.MailServiceReference.IMailService.BeginSendMail
			Return MyBase.Channel.BeginSendMail(mailHost, From, [to], subject, body, attachments, callback, asyncState)
		End Function

		<System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)> _
		Private Sub EndSendMail(ByVal result As System.IAsyncResult) Implements RichEditSendMailSL.MailServiceReference.IMailService.EndSendMail
			MyBase.Channel.EndSendMail(result)
		End Sub

		Private Function OnBeginSendMail(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
			Dim mailHost As String = (CStr(inValues(0)))
			Dim From As String = (CStr(inValues(1)))
			Dim [to] As String = (CStr(inValues(2)))
			Dim subject As String = (CStr(inValues(3)))
			Dim body As String = (CStr(inValues(4)))
			Dim attachments As System.Collections.Generic.List(Of RichEditSendMailSL.MailServiceReference.AttachementInfo) = (CType(inValues(5), System.Collections.Generic.List(Of RichEditSendMailSL.MailServiceReference.AttachementInfo)))
			Return (CType(Me, RichEditSendMailSL.MailServiceReference.IMailService)).BeginSendMail(mailHost, From, [to], subject, body, attachments, callback, asyncState)
		End Function

		Private Function OnEndSendMail(ByVal result As System.IAsyncResult) As Object()
			CType(Me, RichEditSendMailSL.MailServiceReference.IMailService).EndSendMail(result)
			Return Nothing
		End Function

		Private Sub OnSendMailCompleted(ByVal state As Object)
			If (Me.SendMailCompletedEvent IsNot Nothing) Then
				Dim e As InvokeAsyncCompletedEventArgs = (CType(state, InvokeAsyncCompletedEventArgs))
				RaiseEvent SendMailCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
			End If
		End Sub

		Public Sub SendMailAsync(ByVal mailHost As String, ByVal [from] As String, ByVal [to] As String, ByVal subject As String, ByVal body As String, ByVal attachments As System.Collections.Generic.List(Of RichEditSendMailSL.MailServiceReference.AttachementInfo))
			Me.SendMailAsync(mailHost, From, [to], subject, body, attachments, Nothing)
		End Sub

		Public Sub SendMailAsync(ByVal mailHost As String, ByVal [from] As String, ByVal [to] As String, ByVal subject As String, ByVal body As String, ByVal attachments As System.Collections.Generic.List(Of RichEditSendMailSL.MailServiceReference.AttachementInfo), ByVal userState As Object)
			If (Me.onBeginSendMailDelegate Is Nothing) Then
				Me.onBeginSendMailDelegate = New BeginOperationDelegate(AddressOf Me.OnBeginSendMail)
			End If
			If (Me.onEndSendMailDelegate Is Nothing) Then
				Me.onEndSendMailDelegate = New EndOperationDelegate(AddressOf Me.OnEndSendMail)
			End If
			If (Me.onSendMailCompletedDelegate Is Nothing) Then
				Me.onSendMailCompletedDelegate = New System.Threading.SendOrPostCallback(AddressOf Me.OnSendMailCompleted)
			End If
			MyBase.InvokeAsync(Me.onBeginSendMailDelegate, New Object() { mailHost, From, [to], subject, body, attachments}, Me.onEndSendMailDelegate, Me.onSendMailCompletedDelegate, userState)
		End Sub

		Private Function OnBeginOpen(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
			Return (CType(Me, System.ServiceModel.ICommunicationObject)).BeginOpen(callback, asyncState)
		End Function

		Private Function OnEndOpen(ByVal result As System.IAsyncResult) As Object()
			CType(Me, System.ServiceModel.ICommunicationObject).EndOpen(result)
			Return Nothing
		End Function

		Private Sub OnOpenCompleted(ByVal state As Object)
			If (Me.OpenCompletedEvent IsNot Nothing) Then
				Dim e As InvokeAsyncCompletedEventArgs = (CType(state, InvokeAsyncCompletedEventArgs))
				RaiseEvent OpenCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
			End If
		End Sub

		Public Sub OpenAsync()
			Me.OpenAsync(Nothing)
		End Sub

		Public Sub OpenAsync(ByVal userState As Object)
			If (Me.onBeginOpenDelegate Is Nothing) Then
				Me.onBeginOpenDelegate = New BeginOperationDelegate(AddressOf Me.OnBeginOpen)
			End If
			If (Me.onEndOpenDelegate Is Nothing) Then
				Me.onEndOpenDelegate = New EndOperationDelegate(AddressOf Me.OnEndOpen)
			End If
			If (Me.onOpenCompletedDelegate Is Nothing) Then
				Me.onOpenCompletedDelegate = New System.Threading.SendOrPostCallback(AddressOf Me.OnOpenCompleted)
			End If
			MyBase.InvokeAsync(Me.onBeginOpenDelegate, Nothing, Me.onEndOpenDelegate, Me.onOpenCompletedDelegate, userState)
		End Sub

		Private Function OnBeginClose(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
			Return (CType(Me, System.ServiceModel.ICommunicationObject)).BeginClose(callback, asyncState)
		End Function

		Private Function OnEndClose(ByVal result As System.IAsyncResult) As Object()
			CType(Me, System.ServiceModel.ICommunicationObject).EndClose(result)
			Return Nothing
		End Function

		Private Sub OnCloseCompleted(ByVal state As Object)
			If (Me.CloseCompletedEvent IsNot Nothing) Then
				Dim e As InvokeAsyncCompletedEventArgs = (CType(state, InvokeAsyncCompletedEventArgs))
				RaiseEvent CloseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
			End If
		End Sub

		Public Sub CloseAsync()
			Me.CloseAsync(Nothing)
		End Sub

		Public Sub CloseAsync(ByVal userState As Object)
			If (Me.onBeginCloseDelegate Is Nothing) Then
				Me.onBeginCloseDelegate = New BeginOperationDelegate(AddressOf Me.OnBeginClose)
			End If
			If (Me.onEndCloseDelegate Is Nothing) Then
				Me.onEndCloseDelegate = New EndOperationDelegate(AddressOf Me.OnEndClose)
			End If
			If (Me.onCloseCompletedDelegate Is Nothing) Then
				Me.onCloseCompletedDelegate = New System.Threading.SendOrPostCallback(AddressOf Me.OnCloseCompleted)
			End If
			MyBase.InvokeAsync(Me.onBeginCloseDelegate, Nothing, Me.onEndCloseDelegate, Me.onCloseCompletedDelegate, userState)
		End Sub

		Protected Overrides Function CreateChannel() As RichEditSendMailSL.MailServiceReference.IMailService
			Return New MailServiceClientChannel(Me)
		End Function

		Private Class MailServiceClientChannel
			Inherits ChannelBase(Of RichEditSendMailSL.MailServiceReference.IMailService)
			Implements RichEditSendMailSL.MailServiceReference.IMailService

			Public Sub New(ByVal client As System.ServiceModel.ClientBase(Of RichEditSendMailSL.MailServiceReference.IMailService))
				MyBase.New(client)
			End Sub

			Public Function BeginSendMail(ByVal mailHost As String, ByVal [from] As String, ByVal [to] As String, ByVal subject As String, ByVal body As String, ByVal attachments As System.Collections.Generic.List(Of RichEditSendMailSL.MailServiceReference.AttachementInfo), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements RichEditSendMailSL.MailServiceReference.IMailService.BeginSendMail
				Dim _args(5) As Object
				_args(0) = mailHost
				_args(1) = From
				_args(2) = [to]
				_args(3) = subject
				_args(4) = body
				_args(5) = attachments
				Dim _result As System.IAsyncResult = MyBase.BeginInvoke("SendMail", _args, callback, asyncState)
				Return _result
			End Function

			Public Sub EndSendMail(ByVal result As System.IAsyncResult) Implements RichEditSendMailSL.MailServiceReference.IMailService.EndSendMail
				Dim _args(-1) As Object
				MyBase.EndInvoke("SendMail", _args, result)
			End Sub
		End Class
	End Class
End Namespace
